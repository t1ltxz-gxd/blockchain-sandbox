name: Continuous Deployment

on:
  workflow_run:
    workflows: [Continuous Integration]
    types:
      - completed
    branches:
      - main

jobs:
  release-binaries:
    needs: deploy
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success'
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-gnu
          - x86_64-apple-darwin

    steps:
      - uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: stable
          target: ${{ matrix.target }}
          override: true

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Package binary
        run: |
          mkdir -p dist
          BIN_NAME="blockchain-sandbox"  # замените на своё имя бинарника
          FILE_NAME="${BIN_NAME}-${{ matrix.target }}"
          if [[ "${{ matrix.target }}" == *windows* ]]; then
            zip -j "dist/$FILE_NAME.zip" "target/${{ matrix.target }}/release/$BIN_NAME.exe"
          else
            tar -czvf "dist/$FILE_NAME.tar.gz" -C "target/${{ matrix.target }}/release" "$BIN_NAME"
          fi

      - name: Upload binaries to GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from Cargo.toml
        id: get-version
        run: |
          VERSION=$(grep '^version =' Cargo.toml | head -n 1 | awk -F '"' '{print $2}')
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/blockchain-sandbox:latest,${{ secrets.DOCKER_USERNAME }}/blockchain-sandbox:${{ steps.get-version.outputs.version }},${{ secrets.DOCKER_USERNAME }}/blockchain-sandbox:${{ github.sha }}
          cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/blockchain-sandbox:buildcache
          cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/blockchain-sandbox:buildcache,mode=max